CLS.JS
let toggleBtn = document.getElementById('toggle-btn');
let body = document.body;
let darkMode = localStorage.getItem('dark-mode');

const enableDarkMode = () =>{
   toggleBtn.classList.replace('fa-sun', 'fa-moon');
   body.classList.add('dark');
   localStorage.setItem('dark-mode', 'enabled');
}

const disableDarkMode = () =>{
   toggleBtn.classList.replace('fa-moon', 'fa-sun');
   body.classList.remove('dark');
   localStorage.setItem('dark-mode', 'disabled');
}

if(darkMode === 'enabled'){
   enableDarkMode();
}

toggleBtn.onclick = (e) =>{
   darkMode = localStorage.getItem('dark-mode');
   if(darkMode === 'disabled'){
      enableDarkMode();
   }else{
      disableDarkMode();
   }
}

let profile = document.querySelector('.header .flex .profile');

document.querySelector('#user-btn').onclick = () =>{
   profile.classList.toggle('active');
   search.classList.remove('active');
}

let search = document.querySelector('.header .flex .search-form');

document.querySelector('#search-btn').onclick = () =>{
   search.classList.toggle('active');
   profile.classList.remove('active');
}

let sideBar = document.querySelector('.side-bar');

document.querySelector('#menu-btn').onclick = () =>{
   sideBar.classList.toggle('active');
   body.classList.toggle('active');
}

document.querySelector('#close-btn').onclick = () =>{
   sideBar.classList.remove('active');
   body.classList.remove('active');
}

window.onscroll = () =>{
   profile.classList.remove('active');
   search.classList.remove('active');

   if(window.innerWidth < 1200){
      sideBar.classList.remove('active');
      body.classList.remove('active');
   }
}





CMP.JS

// JavaScript for adding a new resource
function addResource(category, resourceName, resourceLink) {
    const list = document.getElementById(category);
    const newItem = document.createElement('li');
    const newLink = document.createElement('a');
    newLink.href = resourceLink;
    newLink.textContent = resourceName;
    newItem.appendChild(newLink);
    list.appendChild(newItem);
}

// Example of adding a new academic resource dynamically
addResource('academic-resources', 'Research Center', '#');

// Example of adding a new student service dynamically
addResource('student-services', 'Student Union', '#');

// Example of adding a new recreational facility dynamically
addResource('recreational-facilities', 'Tennis Courts', '#');




INDEX.JS

const myLibrary = [];

const titleInput = document.querySelector('#book-title');
const authorInput = document.querySelector('#author-name');
const pagesInput = document.querySelector('#pages-number');
const readInput = document.querySelector('#read-check');
const addNewBookBtn = document.querySelector('#add-book');
const removeAllBooksBtn = document.querySelector('#remove-all');
const bookContainer = document.querySelector('#book-information');
const table = document.querySelector('#lib-table');
const tableBody = document.querySelector('#book-body');
const hamburgerMenu = document.querySelector('.hamburger');
const navMenu = document.querySelector('.navbar');
const titleErrorMessage = document.querySelector('.title-input .error-message');
const authorErrorMessage = document.querySelector('.author-input .error-message');
const pagesErrorMessage = document.querySelector('.pages-input .error-message');

// Event Listeners
addNewBookBtn.addEventListener('click', addBookToLibrary);
removeAllBooksBtn.addEventListener('click', removeAllBooks);
hamburgerMenu.addEventListener('click', () => {
  hamburgerMenu.classList.toggle('active');
  navMenu.classList.toggle('active');
})

/**
 *  Class function that provides book instances.
 * 
 * @param {*} title 
 *              The title of the book.
 * @param {*} author 
 *              The author of the book.
 * @param {*} pages 
 *              The pages of the book.
 * @param {*} read 
 *              The status of the book.
 */
class Book {
  constructor(title, author, pages, read) {
  this.title = title;
  this.author = author;
  this.pages = pages;
  this.read = read;

}
  getInfo() {
    const readStatus = this.read ? 'read' : 'not read';
    return `${this.title} by ${this.author}, ${this.pages} pages, ${readStatus}.`;
  }
}

// Testing if the method getInfo() from class Book, works properly as intended.
const testBook1 = new Book('Harry Potter and the Philosopher\'s Stone', 'J.K Rowling', 342, true);
const testBook2 = new Book('Eloquent JavaScript', 'Marijin', 380, false);
console.log(testBook1.getInfo());
console.log(testBook2.getInfo());

function addBookToLibrary() {
  table.append(tableBody);
  title = titleInput.value;
  author = authorInput.value;
  pages = pagesInput.value;
  read = readInput.checked;

  if (!validateFormBooks()) {
    return;
  }
  
  let newBook = new Book(title, author, pages, read);
  myLibrary.push(newBook);
  displayLibrary();
  resetAllInputs();
}

function displayLibrary() {
  tableBody.textContent = '';
  myLibrary.forEach((book, index) => {
    const newRow = document.createElement('tr');
    newRow.classList.add('body-row');

    const titleCell = document.createElement('td');
    titleCell.classList.add('body-cell');
    titleCell.textContent = book.title;

    const authorCell = document.createElement('td');
    authorCell.classList.add('body-cell');
    authorCell.textContent = book.author;

    const pagesCell = document.createElement('td');
    pagesCell.classList.add('body-cell');
    pagesCell.textContent = book.pages;

    const statusCell = document.createElement('td');
    statusCell.classList.add('body-cell');
    const readBtn = document.createElement('button');
    readBtn.classList.add('read-status-btn');

    if (book.read) {
     statusCell.textContent = 'Read'; 
     readBtn.style.backgroundColor = 'green';
     readBtn.style.color = 'white';
     readBtn.innerHTML = 'âœ“';
    } else if (!book.read) {
      statusCell.textContent = 'Not Read ';
      readBtn.style.backgroundColor = 'red';
    }

    const removeCell = document.createElement('td');
    removeCell.classList.add('body-cell');
    const removeBookBtn = document.createElement('button');
    removeBookBtn.classList.add('remove-book-btn');
    removeBookBtn.innerHTML = 'ðŸž¬';

    readBtn.addEventListener('click', () => toggleReadStatus(index));
    removeBookBtn.addEventListener('click', () => removeBook(index));

    statusCell.append(readBtn);
    removeCell.append(removeBookBtn);
    newRow.append(titleCell);
    newRow.append(authorCell);
    newRow.append(pagesCell);
    newRow.append(statusCell);
    newRow.append(removeCell);
    tableBody.append(newRow);
  });
}

// Utility Functions
function resetAllInputs() {
  titleInput.value = '';
  authorInput.value = '';
  pagesInput.value = '';
  readInput.checked = false;
  titleErrorMessage.textContent = '';
  authorErrorMessage.textContent = '';
  pagesErrorMessage.textContent = '';
}

function validateFormBooks() {
  const title = titleInput.value;
  const author = authorInput.value;
  const pages = parseInt(pagesInput.value);
  let isValid = true;

  if (!title) {
    showError(titleErrorMessage, 'Please give a valid title of the book');
    isValid = false;
  }   

  if (!author) {
    showError(authorErrorMessage, 'Please give a valid author');
    isValid = false;
  }

  if (!pages || isNaN(pages) || pages <= 0) {
    showError(pagesErrorMessage, 'Please give a valid number of pages');
    isValid = false;
  }
  return isValid;
}

function removeAllBooks() {
  tableBody.textContent = '';
  myLibrary.length = 0;
  resetAllInputs();
}

function toggleReadStatus(index) {
  myLibrary[index].read = !myLibrary[index].read;
  displayLibrary();
}

function removeBook(index) {
  myLibrary.splice(index, 1);
  displayLibrary();
}

function showError(errorElement, message) {
  errorElement.textContent = message;
}

// Default book instance example
const defaultBook1 = new Book('Chaos', 'James Gleick', 368, false);
const defaultBook2 = new Book('The Fellowship of the Ring', 'J.R.R Tolkien', 423, true);
const defaultBook3 = new Book('Atomic Habits', 'James Clear', 368, false);
const defaultBook4 = new Book('Chaos', 'James Woven', 368, true);
myLibrary.push(defaultBook1, defaultBook2);
myLibrary.push(defaultBook3, defaultBook4);

displayLibrary();





main.js

const faqHeaders = document.querySelectorAll(".faqs-container .faq-header");

faqHeaders.forEach((header, i) => {
  header.addEventListener("click", () => {
    header.nextElementSibling.classList.toggle("active");

    const open = header.querySelector(".open");
    const close = header.querySelector(".close");

    if (header.nextElementSibling.classList.contains("active")) {
      open.classList.remove("active");
      close.classList.add("active");
    } else {
      open.classList.add("active");
      close.classList.remove("active");
    }
  });
});

const prev = document.getElementById('prev-btn')
const next = document.getElementById('next-btn')
const list = document.getElementById('item-list')

const itemWidth = 150
const padding = 10

prev.addEventListener('click',()=>{
  list.scrollLeft -= itemWidth + padding
})

next.addEventListener('click',()=>{
  list.scrollLeft += itemWidth + padding
})





